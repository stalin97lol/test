from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
from google_service import log_absence, log_lunch_start, log_lunch_return, check_late_return

API_TOKEN = "8330237437:AAEgFAYGuvnHRwRykGdk5OX_KCSNZ018LCA"
ADMIN_CHAT_ID = 8330237437  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
AUTHORIZED_USERS = [8330237437]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ chat_id –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class AbsenceForm(StatesGroup):
    waiting_for_date = State()
    waiting_for_reason = State()

class LunchState(StatesGroup):
    on_lunch = State()

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"))
main_kb.add(KeyboardButton("üçΩ –û–±–µ–¥"))
main_kb.add(KeyboardButton("‚úÖ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞"))

@dp.message_handler(commands="start")
async def start_cmd(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message_handler(commands="profile")
async def profile(message: types.Message):
    user = message.from_user
    await message.answer(
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:
"
        f"–ò–º—è: {user.full_name}
"
        f"Username: @{user.username or '‚Äî'}
"
        f"ID: {user.id}"
    )

@dp.message_handler(lambda msg: msg.text == "üìÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ")
async def absence_clicked(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        return
    kb = InlineKeyboardMarkup(row_width=2)
    today = datetime.now()
    for i in range(5):
        day = today + timedelta(days=i)
        btn = InlineKeyboardButton(day.strftime("%d.%m.%Y"), callback_data=day.strftime("%Y-%m-%d"))
        kb.insert(btn)
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:", reply_markup=kb)
    await AbsenceForm.waiting_for_date.set()

@dp.callback_query_handler(state=AbsenceForm.waiting_for_date)
async def chosen_date(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(absence_date=callback.data)
    await bot.send_message(callback.from_user.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:")
    await AbsenceForm.waiting_for_reason.set()
    await callback.answer()

@dp.message_handler(state=AbsenceForm.waiting_for_reason)
async def receive_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    absence_date = data["absence_date"]
    reason = message.text
    user = message.from_user.full_name
    log_absence(user, absence_date, reason)
    await bot.send_message(ADMIN_CHAT_ID, f"üö® {user} –±—É–¥–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å {absence_date}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_kb)
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "üçΩ –û–±–µ–¥")
async def lunch_start(message: types.Message, state: FSMContext):
    user = message.from_user.full_name
    start_time = datetime.now()
    end_time = start_time + timedelta(minutes=45)
    await state.update_data(lunch_start=start_time.isoformat())
    log_lunch_start(user, start_time, end_time)
    await message.answer(f"‚è≥ –û–±–µ–¥ –Ω–∞—á–∞—Ç. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–æ {end_time.strftime('%H:%M')}", reply_markup=main_kb)
    await LunchState.on_lunch.set()

@dp.message_handler(lambda msg: msg.text == "‚úÖ –í–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞", state=LunchState.on_lunch)
async def lunch_return(message: types.Message, state: FSMContext):
    user = message.from_user.full_name
    return_time = datetime.now()
    data = await state.get_data()
    start_time = datetime.fromisoformat(data["lunch_start"])
    is_late = check_late_return(start_time, return_time)
    log_lunch_return(user, return_time, is_late)
    status = "‚è± –û–±–µ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –≤–æ–≤—Ä–µ–º—è." if not is_late else "‚ö†Ô∏è –û–±–µ–¥ –∑–∞—Ç—è–Ω—É–ª—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 45 –º–∏–Ω—É—Ç."
    await bot.send_message(ADMIN_CHAT_ID, f"{user} –≤–µ—Ä–Ω—É–ª—Å—è —Å –æ–±–µ–¥–∞ –≤ {return_time.strftime('%H:%M')}\n{status}")
    await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏!", reply_markup=main_kb)
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)